// Consulta 1: Obtener todos los bancos con sede en "Londres".
db.Banco.find({ "Sede": "Londres" })

// Consulta 2: Encontrar todas las cuentas de ahorro con un saldo mayor de 1000 euros.
db.Cuenta.find({ "Tipo": "Ahorros", "Balance": { $gt: 1000 } })

// Consulta 3: Buscar empleados que trabajen en un banco con sede en "Londres".
db.Empleado.find({ "ID_Banco": { $in: [2, 7] } })

// Consulta 4: Encontrar todos los clientes cuyo nombre sea "Juan".
db.Cliente.find({ "Nombre": "Juan" })

// Consulta 5: Obtener la población de todos los países con una población mayor de 50 millones de habitantes.
db.Pais.find({ "Poblacion": { $gt: 50 } })

// Consulta 6: Encontrar todas las cuentas en euros (EUR) con un saldo mayor de 1000 euros.
db.Cuenta.find({ "Divisa.Codigo": "EUR", "Balance": { $gt: 1000 } })

// Consulta 7: Encontrar todos los empleados que no tienen supervisor.
db.Empleado.find({ "Supervisor_ID": null })

// Consulta 8: Encontrar los bancos que operan en más de 5 países.
db.Banco.aggregate([
  {
    $project: {
      Nombre: 1,
      Sede: 1,
      NumPaises: { $size: "$Pais" }
    }
  },
  {
    $match: {
      NumPaises: { $gt: 5 }
    }
  }
])
ó
db.Banco.find({
   $where: "this.Pais.length > 5"
})


// Consulta 9: Obtener el nombre y apellido de los empleados que trabajan en el banco con ID 1.
db.Empleado.find({ "ID_Banco": 1 }, { "Nombre": 1, "Apellido": 1 })

// Consulta 10: Encontrar las cuentas de ahorro con un saldo negativo.
db.Cuenta.find({ "Tipo": "Ahorros", "Balance": { $lt: 0 } })

// Consulta 11: Encontrar las cuentas de ahorro con un saldo negativo.
db.Cuenta.find({ "Tipo": "Ahorros", "Balance": { $lt: 0 } })

// Consulta 12: Encuentra los tres bancos con el mayor número de sucursales (países en los que operan).
db.Banco.aggregate([
  { $project: { "Nombre": 1, "Numero_Paises": { $size: "$Pais" } } },
  { $sort: { "Numero_Paises": -1 } },
  { $limit: 3 }
])

// Consulta 13: Encuentra el cliente más joven.
db.Cliente.aggregate([
  {
    $project: {
      "Nombre": 1,
      "Apellido": 1,
      "Fecha_nacimiento": { $toDate: "$Fecha_nacimiento" },
      "Edad": {
        $floor: {
          $divide: [
            { $subtract: [new Date(), { $toDate: "$Fecha_nacimiento" }] },
            31536000000 // Milisegundos en un año
          ]
        }
      }
    }
  },
  { $sort: { "Edad": 1 } },
  { $limit: 1 }
])

// Consulta 14: Encuentra el saldo total de todas las cuentas en euros (EUR) para cada banco.
db.Cuenta.aggregate([
  { $match: { "Divisa.Codigo": "EUR" } },
  {
    $group: {
      _id: "$ID_Banco",
      Saldo_Total: { $sum: "$Balance" }
    }
  }
])

// Consulta 14: Encuentra la edad promedio de los empleados en el banco con ID 1.
db.Empleado.aggregate([
  {
    $match: { "ID_Banco": 1 }
  },
  {
    $project: {
      "Fecha_contratacion": { $toDate: "$Fecha_contratacion" },
      "Edad": {
        $floor: {
          $divide: [
            { $subtract: [new Date(), { $toDate: "$Fecha_contratacion" }] },
            31536000000 // Milisegundos en un año
          ]
        }
      }
    }
  },
  {
    $group: {
      _id: null,
      EdadPromedio: { $avg: "$Edad" }
    }
  }
])

// Consulta 15: Encuentra los clientes que no tienen cuentas en ningún banco.
db.Cliente.find({
  "ID_Cliente": { $nin: db.Cuenta.distinct("ID_Cliente") }
})
